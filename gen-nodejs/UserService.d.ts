//
// Autogenerated by Thrift Compiler (0.21.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./service_types');
import User = ttypes.User
import GetUserRequest = ttypes.GetUserRequest
import GetUserResponse = ttypes.GetUserResponse

declare class Client {
  private output: thrift.TTransport;
  private pClass: thrift.TProtocol;
  private _seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  getUser(request: GetUserRequest): GetUserResponse;

  getUser(request: GetUserRequest, callback: (error: void, response: GetUserResponse)=>void): void;
}

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_getUser(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
